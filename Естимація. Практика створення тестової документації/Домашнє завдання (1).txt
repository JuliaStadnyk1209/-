Beet Seed


1)Перевірка базового функціоналу мобільного додатку МоноБанк 


Мета: Переконатися, що основні функції застосунку доступні й працюють коректно.
Передумови: Користувач має встановлений застосунок та активний акаунт у МоноБанку.
Кроки:
1. Увійти в застосунок з використанням біометрії або PIN-коду.
2. Перевірити головний екран (наявність балансу, картки, останніх транзакцій).
3. Виконати перегляд історії транзакцій.
4. Здійснити переказ коштів на іншу картку (наприклад, за номером телефону).
5. Перевірити функцію «розстрочка» або «кредитний ліміт».
6. Переглянути розділ «Кешбек» і налаштувати категорії.
7. Надіслати запит до служби підтримки через чат.
8. Вийти з акаунту.


Очікуваний результат: Усі функції працюють стабільно, дані відображаються коректно, немає помилок у інтерфейсі.


2)Тест-кейс 1: Успішний вхід за допомогою PIN-коду
Передумови:
Користувач вже зареєстрований у застосунку та має активний аккаунт.
Кроки:
1. Відкрити застосунок МоноБанк.
2. Вибрати спосіб входу — PIN-код.
3. Ввести правильний 4-значний PIN.

Очікуваний результат: Користувач потрапляє на головний екран застосунку без помилок.
Тест-кейс 2: Переказ коштів за номером телефону
Передумови: Користувач авторизований у застосунку. Достатньо коштів на рахунку.
Кроки:
   1. Натиснути «Переказ» на головному екрані.
   2. Вибрати «За номером телефону».
   3. Ввести номер телефону одержувача.
   4. Ввести суму переказу (наприклад, 100 грн).
   5. Підтвердити операцію (через FaceID або PIN).
Очікуваний результат: Кошти успішно відправлено, з’являється підтвердження операції.

Тест-кейс 3: Надсилання запиту в службу підтримки
Передумови: Користувач увійшов у застосунок.
Кроки:
   1. Перейти в розділ «Допомога» або «Підтримка».
   2. Вибрати «Чат з оператором».
   3. Ввести запит: «Поясніть, як налаштувати кешбек».
   4. Надіслати повідомлення.
Очікуваний результат: Повідомлення успішно відправлено, чат активний, з’являється відповідь або автоматичне повідомлення про чергу.



 Beet Sprout
1. WBS (розбиття на підзадачі + експертна оцінка):


Тест-кейс
	Підзадача
	Орієнтовний час
	Вхід за PIN-кодом
	Відкрити додаток
	0.5 хв
	Ввести PIN
	0.5 хв
	Перевірити завантаження головної сторінки
	1 хв
	Разом
	

	2 хв
	Переказ коштів
	Вибір способу переказу
	0.5 хв
	Введення даних (номер + сума)
	1 хв
	Підтвердження та очікування результату
	1 хв
	Разом
	

	2.5 хв
	Запит до підтримки
	Відкрити чат
	0.5 хв
	

	Ввести повідомлення
	1 хв
	

	Отримати відповідь
	2 хв
	Разом
	

	3.5 хв
	

Загальний час за WBS: 2 + 2.5 + 3.5  ≈ 8 хв


2. Трьохточкова естимація
E = (a + m + b) / 3 
Тест-кейс 1: Вхід у додаток
a=1.5 хв
m = 2 хв
b = 3 хв
E=(1.5+2+3)/3 ≈ 2.17 хв
Тест-кейс 2: Переказ коштів
a = 2 хв
m = 2.5 хв
b = 4 хв
E=(2+2.5+4​)/3≈ 2.83хв
Тест-кейс 3: Чат з підтримкою
a = 2.5 хв
m = 3.5 хв
b = 6 хв
E=(2.5+3.5+6​)/3≈ 4 хв
Загальна оцінка:
2.17+2.83+4≈ 9хв




































Mighty Beet
Cat-Perfect
Test Strategy


Revision History
Date
	Version
	Author
	Description
	2025-06-20
	1.0
	QA Lead
	Initial draft of the test strategy document
	2025-06-21
	1.1
	QA Lead
	Added Scope and Test Approach sections
	2025-06-22
	1.2
	Automation QA
	Included tools and automation test details
	2025-06-23
	1.3
	QA Lead
	Updated Release Control and Risk Analysis
	















1. Scope        3
2. Test Approach        4
3. Test Environment        5
4. Testing Tools        6
5. Release Control        7
6. Risk Analysis        8
7. Review and Approvals        9


   1. Scope
It defines parameters like
   * Who will review the document?
   * Who will approve this document?
   * Testing activities carried out with timelines
Мета: Описати межі тестування, основні функції, які покриваються, та організаційні аспекти.
Що тестується:
   * Авторизація/реєстрація
   * Перегляд стрічки зображень котиків.
   * Завантаження, перегляд і збереження фото.
   * Фільтрація та пошук (за породою, тегами).
   * Лайки, коментарі, поділитись фото.
   * Нотифікації, кешування, офлайн-доступ.
Що не тестується:
   * API сторонніх сервісів (окрім інтеграційної перевірки).
   * Адмін-панель (якщо вона існує) — окрема стратегія.
Хто переглядає документ:
   * QA Lead
   * Project Manager
   * Product Owner
Хто затверджує документ:
   * Project Manager
   * CTO (або Tech Lead)
Тестові активності та орієнтовні строки:






Активність
	Тривалість
	Відповідальні
	Аналіз вимог
	1 день
	QA Lead, аналітик
	Написання тест-кейсів
	2–3 дні
	QA
	Ручне тестування (Smoke/Functional/UI)
	3–4 дні
	QA Team
	Регресія перед релізом
	1 день
	QA
	Автоматизація критичних тестів
	Паралельно спринтам
	Automation QA
	Завершальний звіт про тестування
	1 день
	QA Lead
	

   2. Test Approach
It defines
   * Process of testing
   * Testing levels
   * Roles and responsibilities of each team member
   * Types of Testing ( Load testing, Security testing, Performance testing etc.)
   * Testing approach & automation tool if applicable
   * Adding new defects, re-testing, Defect triage, Regression Testing and test sign off
Процес тестування:
1)Тестування виконується згідно зі Scrum-процесом.
2)Тестування кожної фічі починається після завершення девелопменту у рамках спринту (Shift-left).
3)Всі баги реєструються в Jira, проходять через дефект-менеджмент-процес.
 Рівні тестування:
   * Unit Testing – виконується розробниками.
   * Integration Testing – виконується автоматизовано та вручну (інтеграція з API, соцмережами, Firebase).
   * System Testing – перевірка всієї функціональності.
   * Acceptance Testing – проводиться QA перед демонстрацією клієнту.
Ролі та відповідальності:
   * QA Engineer – створення тест-кейсів, виконання ручного тестування, звітність.
   * QA Lead – контроль якості, дефект-менеджмент, підпис тестів, організація ретестів і регресій.
   * PM/Product Owner – пріоритезація дефектів на тріажах.
Типи тестування:
   * Функціональне тестування
   * UI/UX тестування
   * Регресійне тестування
   * Performance Testing (відкриття стрічки, завантаження фото) – при потребі.
   * Security Testing (вхід, захист особистих даних) – мінімально, вручну.
   * Load Testing – планується для релізної версії API.




Інструменти та підхід до автоматизації:
   * Appium – UI-автотести для Android/iOS.
   * Postman – API тестування.
   * Jenkins – запуск автотестів.
   * Firebase Crashlytics – для логів і помилок у продакшн.
Дефект-менеджмент:
   * Баги реєструються в Jira з прив’язкою до спринтів.
   * Ретест – після кожного фіксу.
   * Дефект-тріаж – щотижня з командою PM/QA/Dev.
   * Регресія – перед кожним релізом.
   * Test sign-off – після успішного проходження smoke- та функціональних тестів.








   3. Test Environment
   * Define number of requirement and setup required for each environment
   * Define backup of test data and restore strategy


Необхідні середовища та налаштування:


Середовище
	Призначення
	Необхідне ПЗ/Налаштування
	Dev
	Для первинного тестування фіч розробниками
	Firebase, mock-сервери, тестовий бекенд
	QA/Staging
	Основне середовище для ручного та автоматичного тестування
	Production-копія бази, SSL, повна функціональність
	Production
	Для smoke-тестів після релізу
	Живі дані, реальні акаунти
	

Пристрої для тестування:
   * Android: 10, 11, 12, 13, 14 (телефони Samsung, Xiaomi)
   * iOS: 15, 16, 17 (iPhone 11, 12, 14)
   * Емулятори/Симулятори — для автотестів.


Резервне копіювання тестових даних:
   * Перед регресією або масовим тестуванням створюється бекап тестової бази (через Firebase Admin або спеціальний скрипт).
   * Зберігання бекапів — щоденне/тижневе, автоматизовано на staging-сервері.


Стратегія відновлення:
   * У разі серйозних збоїв — виконується повне відновлення з останнього збереження.
   * Часткове відновлення можливо через SQL-дампи або API-інструменти.
   * QA має доступ до інструментів відновлення через скрипти або через DevOps.
   4. Testing Tools
   * Automation and Test management tools needed for test execution
   * Figure out number of open-source as well as commercial tools required, and determine how many users are supported on it and plan accordingly
Інструменти для тестування:


Категорія
	Інструмент
	Тип
	Призначення
	Кількість користувачів
	Test Management
	TestRail / Google Sheets
	Комерційний / Open-source
	Управління тест-кейсами, прогресом
	До 5 QA
	Issue Tracking
	Jira
	Комерційний
	Баг-трекінг, планування спринтів
	До 10 користувачів
	Automation
	Appium
	Open-source
	Мобільна автоматизація (Android/iOS)
	2 Automation QA
	API Testing
	Postman
	Open-source
	Тестування REST API
	3 QA
	CI/CD
	Jenkins
	Open-source
	Запуск автотестів, білди
	2 DevOps
	Performance Monitoring
	Firebase, Crashlytics
	Комерційний
	Логи, креші, аналітика в реальному часі
	Усі учасники команди
	Design Review
	Figma
	Комерційний
	Перевірка відповідності UI/UX
	QA + дизайн команда
	





 Коментарі до планування:
   * Appium використовуватиметься у зв’язці з Jenkins для нічних запусків автотестів.
   * Postman дозволяє писати тести на API з автоматичними скриптами (collection runner).

   * TestRail або Google Sheets — залежно від бюджету, гнучко масштабується.
   * Усі облікові записи створюються централізовано DevOps- або QA-лідом.
________________


      5. Release Control
      * Release management plan with appropriate version history that will make sure test execution for all modification in that release
Мета: Забезпечити керованість релізів із чітким планом тестування, версіювання та збереження стабільності продукту при кожній зміні.
План управління релізами:
      * X – мажорна зміна (новий модуль, API, редизайн).
      * Y – мінорна (нова функція без зламу основного функціоналу).
      * Z – патч (виправлення багів).
Цикл релізу:
      * Development → QA (Staging) → UAT → Production
      * Релізи плануються кожні 2 тижні (якщо не критичні багфікси).
Вимоги до кожного релізу:
      * Повне проходження регресійного тестування.
      * Виконання smoke-тестів на staging-сервері.
      * Протокол Test Sign-off від QA Lead.
      * Оновлення тестової документації (TestRail, Jira).
      * Запис релізу в Release Notes з описом:
      * Що змінено.
      * Що протестовано.
      * Відомі проблеми (якщо є).
Внесення змін:
      * Кожна зміна має Jira-тикет, прив’язаний до релізу.
      * Реліз не допускається без QA-перевірки та підтвердження в test run'і.
________________


      6. Risk Analysis
      * List all risks that you can estimate
      * Give a clear plan to mitigate the risks also a contingency plan


Потенційні ризики та їх вплив на тестування або якість продукту:


№
	Ризик
	Мітинг-план (профілактика)
	Аварійний план (contingency)
	1
	Нестабільна робота API або сторонніх сервісів (наприклад, породи котів)
	Мокати API для автономного тестування. Визначити SLA з бекендом.
	Використовувати локальні дані, повторити тест після відновлення
	2
	Проблеми з інтернетом/мережею під час тестів
	Проводити тести в умовах стабільного з'єднання
	Зберігати логи та робити ретест після відновлення
	3
	Несумісність на старих пристроях
	Додати тестування на емулюваних і реальних старих Android/iOS
	Пріоритизувати критичні пристрої за статистикою користувачів
	4
	Відсутність оновленої документації по новому функціоналу
	Регулярні стендапи з розробниками, включення QA у refinement
	Тестування за інтерфейсом, exploratory testing
	5
	Відкладене виправлення критичних багів перед релізом
	Визначити deadline для dev-фіксів
	Прийняття рішення: відкат або відкладання релізу
	6
	Недостатнє покриття автотестами
	Включити Automation QA у планування, пріоритизувати smoke-сценарії
	Виконання критичних перевірок вручну
	7
	Нестача ресурсів (QA/пристрої/часу)
	Планування навантаження QA заздалегідь
	Фокус на пріоритетних тестах, відкладання нефункціонального
	________________


      7. Review and Approvals
      * All these activities are reviewed and sign off by the business team, project management, development team, etc.
      * Summary of review changes should be traced at the beginning of the document along with approved date, name, and comment
 Опис: Усі розділи тестової стратегії проходять перевірку та затвердження ключовими учасниками проєкту, щоб гарантувати відповідність бізнес-вимогам, технічним можливостям та критеріям якості.
 Учасники перевірки та погодження: 
      * Business Team / Product Owner — перевірка відповідності вимогам продукту.
      * Project Manager — контроль ризиків, термінів, релізного процесу.
      * QA Lead — відповідальний за зміст і повноту QA-процесів.
      * Tech Lead / Dev Team — погодження технічної реалізації, середовищ, інструментів.
Журнал перевірки та затвердження:




Дата
	Ім’я
	Роль
	Коментар / правка
	Підпис / Затверджено
	2025-06-20
	Степан Ковальчук
	QA Lead
	Додано уточнення до Risk Analysis
	✅ Так
	2025-06-21
	Ігор Ласточкін
	Product Owner
	Уточнено Scope: додано секцію про лайки/коментарі
	✅ Так
	2025-06-22
	Олена Паляниця
	Project Manager
	Погоджено релізний цикл, версіювання
	✅ Так
	2025-06-23
	Карина Жуковська
	Tech Lead
	Перевірено Test Environment та інструменти
	✅ Так