Beet Sprout
Severity – Critical / Priority – Low
Це рідкісні, але потенційно фатальні помилки. Вони можуть викликати серйозні наслідки, але трапляються вкрай рідко або в незначних умовах.
Приклад 1:
Помилка в модулі обробки великого обсягу даних призводить до краху сервера при завантаженні файлу розміром понад 10 ГБ.
* Severity: Критична (завершення роботи сервера, можлива втрата даних).

* Priority: Низька (цей сценарій — крайній випадок, майже не використовується на практиці).

Приклад 2:
Додаток перестає працювати при зміні мови інтерфейсу на дуже рідкісну (наприклад, суахілі).
   * Severity: Критична (додаток не функціонує).

   * Priority: Низька (дуже мала частка користувачів).
Severity – Minor / Priority – Highest
Ці помилки не критичні з технічної точки зору, але мають високий пріоритет через бізнес-або іміджевий вплив.
Приклад 1:
На головній сторінці написано “Вхід” з орфографічною помилкою (“Вход”).
      * Severity: Незначна (не впливає на роботу сайту).

      * Priority: Найвища (псує враження, погіршує імідж компанії).

Приклад 2:
На екрані оформлення замовлення логотип компанії відображається некоректно (розтягнутий або піксельований).
         * Severity: Незначна (лише візуальна помилка).

         * Priority: Найвища (впливає на довіру до бренду, особливо в e-commerce).
Mighty Beet
Життєвий цикл багу в Jira для застосунку обміну фото котиків
1. Open (Відкрито)
            * Баг виявлено й зареєстровано в Jira.

            * Створюється новий тикет із детальним описом проблеми.

            *  Відповідальна особа ще не призначена.

2. To Do / Backlog (У черзі / До виконання)
               * Баг визнаний валідним і пріоритезований.

               * Його ще не взяли в роботу, але він очікує розробника.

               *  Часто використовується під час спринтів.

3. In Progress (В роботі)
                  * Розробник почав виправлення багу.

                  * Ведеться активна розробка.

4. In Review (На рев'ю)
                     * Код зміни вже завершено, але проходить перевірку (peer-review).

                     * Це важливо, щоб не впровадити нові баги при виправленні старих.

5. Ready for Testing (Готово до тестування)
                        * Після merge у гілку для тестів.

                        * Тестувальники можуть перевіряти результат виправлення.

6. In Testing (Тестується)
                           * Активне тестування багу командою QA.

                           * Тут важливо ретельно перевірити, чи баг справді виправлено, і не з’явилось нічого нового.

7. Reopened (Перевідкрито) (опціонально)
                              * Якщо баг не виправлено або з’явився знову.

                              * Повертається в роботу.

8. Done (Завершено)
                                 * Баг успішно виправлено, протестовано та задеплоєно.

                                 * Закривається.

________________


 Чому така послідовність?
                                    * Вона охоплює весь життєвий цикл: від виявлення до перевірки та закриття.

                                    * Дозволяє відстежувати відповідального на кожному етапі.

                                    * Важлива для контролю якості, особливо у зростаючому стартапі.

                                    * Статуси гнучкі: за потреби ви можете спростити або деталізувати залежно від розміру команди.