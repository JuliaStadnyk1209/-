Beet Seed
1)
Критерій
	Функціональне тестування
	Нефункціональне тестування
	Тестування,пов'язане зі змінами
	Що перевіряється
	Перевірка того,що система робить- функції,бізнес-логіка,відповідність вимогам
	Перевіряє як система працює - продуктивність,навантаження,безпека,юзабіліті
	Перевірка впливу змін-чи не порушили зміни наявну функціональність або вирішили помилки
	Коли застосовується
	На всіх етапах розробки (зазвичай після написання певного функціоналу)
	Після завершення основного функціоналу або паралельно з ним у пізніх стадіях
	Після виправлень,оновлень, змін у коді чи конфігураціях
	Обмеження
	Може не охоплювати продуктивність чи стабільність системи
	Не охоплює правильність бізнес-логіки
	Може не виявити нові помилки,якщо тести не оновлено або не охоплюють змінені області
	Особливості
	Базується на специфікації,часто реалізується як тест-кейси,чек-листи
	Вимагає специфічних елементів (наприклад JMeter, LoadRunner),визначення метрик
	Включає регресійне,повторне тестування,smoke-тестування,особливо важливе при CI/CD
	

2)Різниця між регресійним тестуванням та ретестингом полягає в обсязі та меті тестування. Регресійне тестування перевіряє, що нові зміни в коді не зіпсували існуючу функціональність. Ретестування ж зосереджується на перевірці конкретної виправленої помилки, щоб переконатися, що вона дійсно усунена.Регреснійне тестування тестує раніше працюючі системи,навіть ті яких не торкалися зміни,а рестестинг  - саме те місце,де була помилка,і пов'язані кроки.


Beet Sprout


1) Проведення функціонального тестування можливе,але виправдане лише у вузьких сценаріях.Для якісного,конкурентоспроможного продукту необхідно тестувати і нефункціональні вимоги,особливо перед релізом на реальний ринок або масштабуванням.
* Коли можливе лише функціональне тестування:
⦁Прототип або MVP - на початкових етапах розробки важливо перевірити лише основну функціональність,щоб швидко вийти на ринок або протестувати ідею.Нефункціональні вимоги можуть бути тимчасово відкладені.
⦁Внутрішні інструменти або адмінки - Якщо продукт використовується лише всередині компанії технічними працівниками,вимоги до продуктивності,дизайну чи навантаження можуть бути менш кристичними.
⦁Обмежені ресурси - на перших етапах стартапу чи проєкту може не вистачати часу,бюджету або людей для повного нефункціонального тестування.
⦁Ригідні часові рамки - якщо критично важливо вийти в реліз,команда може свідомо відкласти нефункціональне тестування на пізніший спринт.


* Чому тільки функціональне функціонування недостатнє?
⦁Користувачі не сприймають продукт лише за функціоналом.Якщо сайт робить те що має,але повільний,нестабільний або незручний - користувачі будуть незадоволені.
⦁Без нефункціонального тестування неможливо гарантувати : швидкодію,безпеку,масштабованість,та сумісність з різними пристроями.
⦁Продукт може не витримати навантаження,навіть якщо логіка реалізована правильно.
⦁Виявлення проблем після релізу може бути значно дорожчим ,ніж рання перевірка.


2)Димове тестування (smoke testing) є важливою частиною процесу тестування програмного забезпечення, але його не завжди потрібно проводити. Воно є корисним, коли необхідно швидко перевірити основні функції після внесення змін до коду або створення нової версії програми. 
2) Димове тестування є особливо доречним:
-Після змін у коді:
Якщо були внесені зміни у код програми, димове тестування допоможе швидко перевірити, чи ці зміни не зламали основні функції.
-Перед релізом нової версії:
Димове тестування може бути використано для перевірки, чи нові версії програмного забезпечення функціонують належним чином.
-У процесах автоматизованого тестування:
Димові тести можуть бути інтегровані в процеси автоматизованого тестування для забезпечення якості програмного забезпечення.
-У малих та середніх проектах:
Димове тестування може бути більш важливим у малих проектах, де час та ресурси для тестування обмежені. 


Димове тестування не покриває всі можливі сценарії використання та не виявляє всі типи дефектів. Для більш детального та повного тестування потрібні інші види тестування, такі як функціональне, інтеграційне, системне та нефункціональне тестування. 
















Mighty Beet
1)


Тест кейс 1:Завантаження фото з котиком
 Назва: Завантаження допустимого зображення (котик)
Кроки:
-Увійти в застосунок
-Перейти до меню “Завантажити фото”
-Вибрати зображення котика
-Натиснути
Очікуваний результат: Фото успішно публікується на стрічці користувача,без помилок.


Тест-кейс 2 : Спроба завантажити фото людини
Назва: Блокування недопустимого контенту (людина)
Кроки:
-Увійти в застосунок
-Перейти до “Завантажити фото”
-Вибрати зображення людини
-Натиснути “Опублікувати”
Очікуваний результат: Застосунок відображає повідомлення “Можна завантажувати лише фото котиків”,фото не публікується.


Тест-кейс 3 : Лайк фото іншого користувача
Назва: Лайк фотографії
Кроки : 
-Увійти в застосунок
-Перейти до стрічки
-натиснути кнопку “🧡”під будь-яким фото
Очікуваний результат: Лічильник лайків збільшується на 1 ,лайк зберігається у базі.


Тест-кейс 4 :Додавання коментаря
Назва: Коментувати фото
Кроки:
-Увійти в застосунок
-Відкрити будь-яке фото в стрічці
-Ввести коментар “Який милий котик”
-Натиснути “Опублікувати”
Очікуваний результат: Коментар відображається під фото,з іменем користувача та часом.


Тест-кейс 5 :Додавання друга
Назва: Додавання користувача в друзі
Кроки: 
-Увійти в застосунок
-Знайти іншого користувача через пошук
-Натиснути “Додати в друзі”
Очікуваний результат: Запит надсилається,статус показує “Очікує підтвердження”.
2)Ось 3 нефункціональні вимоги, які я як власник  стартапу хотіла б застосувати до мобільного застосунку для обміну фото котиків - і приклади перевірок,які можна виконати для кожної:


* Продуктивність
Вимога:Застосунок має завантажувати стрічку фотографій не довше ніж за 2 сек на 4G з'єднанні.
Перевірка: 
-Використати інструмент для вимірювання часу завантаження стрічки
-Тестовий сценарій:
а)Відкрити застосунок з мережевими умовами 4G
б)Перейти до стрічки
в)Виміряти час від натискання до повної візуалізації 10 фото.
Очікуваний результат: Час не перевищує 2 сек.


* Безпека
Вимога: Дані користувача (паролі,токени) мають бути передані лише через захищене з'єднання і зберігатися шифрованими.
Перевірка:
-Провести тестування за допомогою проксі-інструментів,щоб переконатися що:
а)Трафік іде через HTTPS
б)Немає витоку сесійних токенів
Очікуваний результат: Жодні конфіденційні дані не передаються у відкритому вигляді.


* Масштабованість
Вимога: Система повинна витримувати завантаження фото від 1000 користувачів без помітного падіння продуктивності.
Перевірка: 
а)Імітувати завантаження,підключивши 1000 віртуальних користувачів
б)тестувати:
-Час відповіді бекенду на завантаження фото
- Відсоток помилок
Очікуваний результат: Усі запити виконуються без помилок,середній час відповіді не перевищує заданий ліміт (1 сек).